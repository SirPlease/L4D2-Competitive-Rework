/*
 * =============================================================================
 * SourceMod Extended ChatLog Plugin
 * Logs chat to SQL in a very thready manner.
 *
 * SourceMod (C)2004-2009 AlliedModders LLC.  All rights reserved.
 * =============================================================================
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, version 3.0, as published by the
 * Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * As a special exception, AlliedModders LLC gives you permission to link the
 * code of this program (as well as its derivative works) to "Half-Life 2," the
 * "Source Engine," the "SourcePawn JIT," and any Game MODs that run on software
 * by the Valve Corporation.  You must obey the GNU General Public License in
 * all respects for all other code used.  Additionally, AlliedModders LLC grants
 * this exception to all derivative works.  AlliedModders LLC defines further
 * exceptions, found in LICENSE.txt (as of this writing, version JULY-31-2007),
 * or <http://www.sourcemod.net/license.php>.
*/

#pragma semicolon 1

#include <sourcemod>
#include <colors>
public Plugin:myinfo = 
{
    name = "ChatLogEx",
    author = "muukis (original author Nephyrin)",
    description = "Logs chat to SQL in a very thready manner.",
    version = "1.3.7",
    url = "http://www.sourcemod.net/"
};

new bool:g_TeamFilter[MAXPLAYERS + 1] = { false, ... };
new String:m_mode[12];
new m_lastplayercount = 0;
new m_lastmaxplayercount = 0;
new bool:m_errorlogmsg_id = false;
new bool:m_errorlogmsg_db = false;
new String:m_hostname[256];

new Handle:hdatabase = INVALID_HANDLE;
new Handle:sm_chatlogex_id = INVALID_HANDLE;
new Handle:sm_chatlogex_db = INVALID_HANDLE;
new Handle:sm_chatlogex_cleandays = INVALID_HANDLE;
new Handle:sm_chatlogex_filtermode = INVALID_HANDLE;
new Handle:sm_chatlogex_srvmsgs = INVALID_HANDLE;
new Handle:sm_chatlogex_showplayercon = INVALID_HANDLE;
new Handle:sm_chatlogex_showbotkills = INVALID_HANDLE;
new Handle:sm_chatlogex_mpusemaxclients = INVALID_HANDLE;
new Handle:sm_chatlogex_mpdefault = INVALID_HANDLE;
new Handle:sm_chatlogex_mpcoop = INVALID_HANDLE;
new Handle:sm_chatlogex_mpversus = INVALID_HANDLE;
new Handle:sm_chatlogex_mpsurvival = INVALID_HANDLE;
new Handle:mp_gamemode = INVALID_HANDLE;
new Handle:z_difficulty = INVALID_HANDLE;
new Handle:hostname = INVALID_HANDLE;

#define CHEAT_ANGLES             0
#define CHEAT_CHATCLEAR          1
#define CHEAT_CONVAR             2
#define CHEAT_NOLERP             3
#define CHEAT_BHOP               4
#define CHEAT_AIMBOT             5
#define CHEAT_AIMLOCK            6
#define CHEAT_ANTI_DUCK_DELAY    7
#define CHEAT_NOISEMAKER_SPAM    8
#define CHEAT_MACRO              9 
#define CHEAT_NEWLINE_NAME      10
#define CHEAT_MAX               11

public OnPluginStart()
{
    sm_chatlogex_id = CreateConVar("sm_chatlogex_id", "", "The id to use for logging this server's chat to the database. Must be set for this plugin to function.");
    sm_chatlogex_db = CreateConVar("sm_chatlogex_db", "sourcebans", "\"default\" [default] The database configuration to use for logging this server's chat to.");
    sm_chatlogex_cleandays = CreateConVar("sm_chatlogex_cleandays", "7", "7 [default] causes ChatLogEx to clean the database input rows older than set value days. Set to 0 to leave all messages uncleaned.");
    sm_chatlogex_filtermode = CreateConVar("sm_chatlogex_filtermode", "1", "1 [default] causes ChatLogEx to log messages post-processing by other addons. This means chat messages will be logged as they are seen by players, and wont include @commands or censored chat. 0 means ChatLog will directly log 'say' commands, which will include admin messages, messages that are ultimately changed by other plugins, and might not include chat events generated by other plugins.");
    sm_chatlogex_srvmsgs = CreateConVar("sm_chatlogex_srvmsgs", "1", "1 [default] causes ChatLogEx to log server messages.");

    sm_chatlogex_showbotkills = CreateConVar("sm_chatlogex_showbotkills", "0", "0 [default] causes ChatLogEx to log messages when a bot got killed by a player. In L4D this value effects the logs of computer controlled special infected (Boomer, Smoker, etc). Does not override sm_chatlogex_srvmsgs.");
    sm_chatlogex_showplayercon = CreateConVar("sm_chatlogex_showplayercon", "1", "1 [default] causes ChatLogEx to log server messages when player connects or disconnects. Effects the visibility of showing how many players are connected to the server. Does not override sm_chatlogex_srvmsgs.");
    sm_chatlogex_mpusemaxclients = CreateConVar("sm_chatlogex_mpusemaxclients", "1", "1 [default] max players are taken from MaxClients property. Overrides all other sm_chatlogex_mp* cvars. This value is displayed on 'players online' messages.");
    sm_chatlogex_mpdefault = CreateConVar("sm_chatlogex_mpdefault", "16", "16 [default] max players in other gamemodes (other games than Left4Dead). This value is displayed on 'players online' messages.");
    sm_chatlogex_mpcoop = CreateConVar("sm_chatlogex_mpcoop", "4", "4 [default] max players in co-op gamemode. This value is displayed on 'players online' messages.");
    sm_chatlogex_mpversus = CreateConVar("sm_chatlogex_mpversus", "8", "8 [default] max players in versus gamemode. This value is displayed on 'players online' messages.");
    sm_chatlogex_mpsurvival = CreateConVar("sm_chatlogex_mpsurvival", "4", "4 [default] max players in survival gamemode. This value is displayed on 'players online' messages.");

    AutoExecConfig(true, "sm_chatlogex");
    
    mp_gamemode = FindConVar("mp_gamemode");
    z_difficulty = FindConVar("z_difficulty");
    
    hostname = FindConVar("hostname");
    sm_chatlogex_id = FindConVar("hostport");
    if (hostname != INVALID_HANDLE)
    {
        GetConVarString(hostname, m_hostname, sizeof(m_hostname));
        HookConVarChange(hostname, HostnameChanged);
    }
    
    RegConsoleCmd("say", Command_Say);
    RegConsoleCmd("say_team", Command_Say);
    
    RegAdminCmd("sm_say", Command_SmSay, ADMFLAG_CHAT, "sm_say <message> - sends message to all players");
    RegAdminCmd("sm_csay", Command_SmSay, ADMFLAG_CHAT, "sm_csay <message> - sends centered message to all players");

    RegAdminCmd("sm_chatlogex_clean", Command_SmChatLogExClean, ADMFLAG_ROOT, "sm_chatlogex_clean [days] - cleans chatlog messages older than days given in parameter (default value set by sm_chatlogex_cleandays)");

    if (!HookEventEx("player_say", Event_PlayerChat, EventHookMode_Pre))
    {
        LogError("Failed to hook player_say, sm_chatlogex_filtermode 1 will not work");
    }

    if (!HookEventEx("player_connect", Event_PlayerConnect, EventHookMode_Pre))
    {
        LogError("Failed to hook player_connect!");
    }
    
    if (!HookEventEx("player_disconnect", Event_PlayerDisconnect, EventHookMode_Pre))
    {
        LogError("Failed to hook player_disconnect!");
    }
    
    if (!HookEventEx("player_changename", Event_PlayerChangename, EventHookMode_Pre))
    {
        LogError("Failed to hook player_info!");
    }
    
    /*if (!HookEventEx("player_death", Event_PlayerDeath, EventHookMode_Pre))
    {
        LogError("Failed to hook player_info!");
    }*/
    
    SetCurrentGameMode();
    
    m_lastmaxplayercount = GetMaxPlayersForCurrentGameMode();
}

public APLRes AskPluginLoad2(Handle myself, bool late, char[] error, int err_max)
{
    CreateNative("AddToChatLog", Native_AddToChatLog);
    CreateNative("AddToChatLog2", Native_AddToChatLog2);
    RegPluginLibrary("chatlogex");
    return APLRes_Success;
}

int Native_AddToChatLog(Handle plugin, int numParams){
    char name[64];
    char authid[128];
    char text[512];
    int team, type;
    char srvid[64];
    GetConVarString(sm_chatlogex_id, srvid, sizeof(srvid));
    GetNativeString(1, name, sizeof(name));
    GetNativeString(2, authid, sizeof(authid));
    GetNativeString(3, text, sizeof(text));
    team = GetNativeCell(4);
    type = GetNativeCell(5);
    logSomeTextYo2(name, authid, text, team, srvid, type);
    return 0;
}

int Native_AddToChatLog2(Handle plugin, int numParams){
    char srvid[64];
    GetConVarString(sm_chatlogex_id, srvid, sizeof(srvid));
    char text[512];
    GetNativeString(1, text, sizeof(text));
    logSomeTextYo2("", "", text, -1, srvid, -1);
    return 0;
}

public Action lilac_cheater_detected(int client, int cheat)
{
    char srvid[64];
    GetConVarString(sm_chatlogex_id, srvid, sizeof(srvid));
    char Buffer[512];
    switch (cheat) {
        case CHEAT_ANGLES: {
            Format(Buffer, 512, "[LAC] %N - CHEAT_ANGLES", client);
        }
        case CHEAT_AIMLOCK: {
            Format(Buffer, 512, "[LAC] %N - CHEAT_AIMLOCK", client);
        }
        case CHEAT_CHATCLEAR: {
            Format(Buffer, 512, "[LAC] %N - CHEAT_CHATCLEAR", client);
        }
        case CHEAT_CONVAR: {
            Format(Buffer, 512, "[LAC] %N - CHEAT_CONVAR", client);
        }
        case CHEAT_NOLERP: {
            Format(Buffer, 512, "[LAC] %N - CHEAT_NOLERP", client);
        }
        case CHEAT_BHOP: {
            Format(Buffer, 512, "[LAC] %N - CHEAT_BHOP", client);
        }
        case CHEAT_AIMBOT: {
            Format(Buffer, 512, "[LAC] %N - CHEAT_AIMBOT", client);
        }
        case CHEAT_ANTI_DUCK_DELAY: {
            Format(Buffer, 512, "[LAC] %N - CHEAT_ANTI_DUCK_DELAY", client);
        }
        case CHEAT_NOISEMAKER_SPAM: {
            Format(Buffer, 512, "[LAC] %N - CHEAT_NOISEMAKER_SPAM", client);
        }
        case CHEAT_MACRO: {
            Format(Buffer, 512, "[LAC] %N - CHEAT_MACRO", client);
        }
        case CHEAT_NEWLINE_NAME: {
            Format(Buffer, 512, "[LAC] %N - CHEAT_NEWLINE_NAME", client);
        }
        default:{
            Format(Buffer, 512, "[LAC] %N - CHEAT TYPE: %i", client, cheat);
        }
    }

    logSomeTextYo2("Little Anti Cheat", "DETECTED", Buffer, 1, srvid, 0);

    if (GetClientTeam(client) == 2)
    {
        CPrintToChatAll("[{green}!{default}] 检测到作弊嫌疑");
        CPrintToChatAll(Buffer);
        CPrintToChatAll("{olive}如果你只是偶尔看见此消息，那么不必在意，如果你看到两次以上，那就自行决策吧");
    }

    return Plugin_Continue;
}

public OnPluginEnd()
{
    // Close Database Handle
    if (hdatabase != INVALID_HANDLE)
    {
        CloseHandle(hdatabase);
        hdatabase = INVALID_HANDLE;
    }
}

public HostnameChanged(Handle:convar, const String:oldValue[], const String:newValue[])
{
    strcopy(m_hostname, sizeof(m_hostname), newValue);
}

SetCurrentGameMode()
{
    GetCurrentGameMode(m_mode, sizeof(m_mode));
}

GetCurrentGameMode(String:mode[], maxlength)
{
    if(mp_gamemode != INVALID_HANDLE)
        GetConVarString(mp_gamemode, mode, maxlength);
    else
        Format(mode, maxlength, "");
}

WriteErrorLogId()
{
    if(!m_errorlogmsg_id)
    {
        LogError("ChatLogEx: Cannot log message, sm_chatlogex_id is not set! ChatLogEx creates a config file in <mod>/cfg/sourcemod. Edit the value in there.");
        m_errorlogmsg_id = true;
    }
}

WriteErrorLogDb()
{
    if(!m_errorlogmsg_db)
    {
        LogError("ChatLogEx: Cannot log message, handle hdatabase is not set!");
        m_errorlogmsg_db = true;
    }
}

public Action:Event_PlayerChat(Handle:event, const String:name[], bool:dontBroadcast)
{
    if (GetConVarInt(sm_chatlogex_filtermode) != 0)
    {
        new String:text[257];
        GetEventString(event, "text", text, sizeof(text));
        new uid = GetEventInt(event, "userid");
        new client = GetClientOfUserId(uid);
        logSomeTextYo(client, text, g_TeamFilter[client]);
    }

    return Plugin_Continue;
}

public Action:Command_SmSay(client, args)
{
    if (args < 1)
        return Plugin_Continue;	
    
    if (GetConVarInt(sm_chatlogex_filtermode) != 0)
    {
        decl String:text[257];
        GetCmdArgString(text, sizeof(text));
        logSomeTextYo3(client, text, 10, -1);
    }

    return Plugin_Continue;
}

public Action:Command_SmChatLogExClean(client, args)
{
    if (args > 1)
        return Plugin_Continue;
        
    decl String:srvid[255];
    
    GetConVarString(sm_chatlogex_id, srvid, sizeof(srvid));
    
    if (!strcmp(srvid, ""))
    {
        PrintToConsole(client, "ChatLogEx: Cannot clean messages, sm_chatlogex_id is not set!");
        return Plugin_Continue;
    }
    
    new clean_days;
    
    if (args > 0)
    {
        decl String:text[257];
        GetCmdArgString(text, sizeof(text));

        clean_days = StringToInt(text);
    }
    else
    {
        clean_days = GetConVarInt(sm_chatlogex_cleandays);
    }

    CleanDB(clean_days, srvid);
    
    PrintToConsole(client, "ChatLogEx: Messages older than %d days were cleaned from the database.", clean_days);

    return Plugin_Continue;
}

public Action:Command_Say(client, args)
{
    decl String:command[12];
    
    GetCmdArg(0, command, sizeof(command));
    
    g_TeamFilter[client] = strcmp(command, "say_team") ? false : true;
    
    if (GetConVarInt(sm_chatlogex_filtermode) == 0)
    {
        decl String:textBuffer[128], String:textClean[128];
        
        GetCmdArgString(textBuffer, sizeof(textBuffer));
        
        new startidx = 0;
        new len = strlen(textBuffer);
        
        if ((textBuffer[0] == '"') && (textBuffer[len-1] == '"'))
        {
            startidx = 1;
            textBuffer[len-1] = '\0';
        }
        
        Format(textClean, sizeof(textClean), "%s", textBuffer[startidx]);

        logSomeTextYo(client, textClean, g_TeamFilter[client]);
    }
    
    return Plugin_Continue;
}

public Action:LogOnMapStart(Handle:timer)
{
    if(!GetConVarBool(sm_chatlogex_srvmsgs))
        return Plugin_Continue;

    decl String:srvid[255];
    
    GetConVarString(sm_chatlogex_id, srvid, sizeof(srvid));
    
    if (!strcmp(srvid, ""))
    {
        WriteErrorLogId();
        return Plugin_Continue;
    }

    decl String:mapname[255], String:text[256];
    GetCurrentMap(mapname, sizeof(mapname));
    SetCurrentGameMode();

    if(StrEqual(m_mode, ""))
        Format(text, sizeof(text), "=====地图开始 (%s)=====", mapname);
    else
    {
        if(StrEqual(m_mode, "coop"))
        {
            decl String:difficulty[16];
            GetConVarString(z_difficulty, difficulty, sizeof(difficulty));
    
            Format(text, sizeof(text), "=====地图开始 (%s:%c%s:%s)=====", m_mode, CharToLower(difficulty[0]), difficulty[1], mapname);
        }
        else
            Format(text, sizeof(text), "=====地图开始 (%s:%s)=====", m_mode, mapname);
    }

    logSomeTextYo2("", "", text, -1, srvid, -1);
    
    //LogPlayerCount();
    
    return Plugin_Continue;
}

//public OnMapStart()
public OnConfigsExecuted()
{
    if(hdatabase == INVALID_HANDLE)
    {
        decl String:dbconfname[256];
        GetConVarString(sm_chatlogex_db, dbconfname, sizeof(dbconfname));

        // Open Database Handle
        SQL_TConnect(sql_Connect, dbconfname); // Change if you don't want to use 'default'
    }
    else
        LogOnMapStart(INVALID_HANDLE);
}

public OnMapEnd()
{
    if(!GetConVarBool(sm_chatlogex_srvmsgs))
        return;

    decl String:srvid[255];
    
    GetConVarString(sm_chatlogex_id, srvid, sizeof(srvid));
    
    if (!strcmp(srvid, ""))
    {
        WriteErrorLogId();
        return;
    }

    decl String:mapname[255], String:text[256];
    GetCurrentMap(mapname, sizeof(mapname));

    if(StrEqual(m_mode, ""))
        Format(text, sizeof(text), "=====地图结束 (%s)=====", mapname);
    else
    {
        if(StrEqual(m_mode, "coop"))
        {
            decl String:difficulty[16];
            GetConVarString(z_difficulty, difficulty, sizeof(difficulty));
    
            Format(text, sizeof(text), "=====地图结束 (%s:%c%s:%s)=====", m_mode, CharToLower(difficulty[0]), difficulty[1], mapname);
        }
        else
            Format(text, sizeof(text), "=====地图结束 (%s:%s)=====", m_mode, mapname);
    }

    logSomeTextYo2("", "", text, -1, srvid, -1);

    // Clean the logs
    new clean_days = GetConVarInt(sm_chatlogex_cleandays);
    CleanDB(clean_days, srvid);
}


CleanDB(clean_days, const String:srvid[] = "")
{
    // We assume the check for srvid is already done by now!
    if (clean_days > 0 && strlen(srvid) > 0)
    {
        decl String:query[512];
        Format(query, sizeof(query),
            "delete low_priority from `chatlogs` where `date` < subdate(now(), %d) and `srvid` = '%s';",
            clean_days,
            srvid
        );

        SendQuery(query);
    }
}


public Action:Event_PlayerDeath(Handle:event, const String:name[], bool:dontBroadcast)
{
    if(!GetConVarBool(sm_chatlogex_srvmsgs))
        return Plugin_Continue;
        
    decl String:srvid[255];
    
    GetConVarString(sm_chatlogex_id, srvid, sizeof(srvid));
    
    if (!strcmp(srvid, ""))
    {
        WriteErrorLogId();
        return Plugin_Continue;
    }
    
    new client = GetClientOfUserId(GetEventInt(event, "userid"));

    // A bot was killed (in L4D this means common infected)
    if (client == 0)
        return Plugin_Continue;

    new attacker = GetClientOfUserId(GetEventInt(event, "attacker"));
    
    new bool:validclient, bool:validattacker;
    
    validclient = IsValidPlayer(client);
    validattacker = IsValidPlayer(attacker);

    if ((!validclient && !validattacker) || (!validclient && !GetConVarBool(sm_chatlogex_showbotkills)))
        return Plugin_Continue;

    decl String:authid[32], String:username[65], String:attackername[65], String:text[256];
    
    GetClientName(client, username, sizeof(username));
    GetClientName(attacker, attackername, sizeof(attackername));

    if (!validattacker)
    {
        GetClientAuthString(client, authid, sizeof(authid));

        if (strcmp(m_hostname, attackername, true) == 0)
            Format(text, sizeof(text), "Player %s was killed by a bot", username);
        else
            Format(text, sizeof(text), "Player %s was killed by a bot (%s)", username, attackername);
    }
    else if (!validclient)
    {
        GetClientAuthString(attacker, authid, sizeof(authid));

        if (strcmp(m_hostname, username, true) == 0)
            Format(text, sizeof(text), "A bot was killed by player %s", attackername);
        else
            Format(text, sizeof(text), "A bot (%s) was killed by player %s", username, attackername);
    }
    else
    {
        GetClientAuthString(client, authid, sizeof(authid));
        
        Format(text, sizeof(text), "Player %s was killed by player %s", username, attackername);
    }

    logSomeTextYo2("", authid, text, -1, srvid, -2);
    
    return Plugin_Continue;
}


public Action:Event_PlayerChangename(Handle:event, const String:name[], bool:dontBroadcast)
{
    if(!GetConVarBool(sm_chatlogex_srvmsgs))
        return Plugin_Continue;

    new client = GetClientOfUserId(GetEventInt(event, "userid"));
    
    if(!IsValidPlayer(client))
        return Plugin_Continue;
    
    decl String:srvid[255];
    
    GetConVarString(sm_chatlogex_id, srvid, sizeof(srvid));
    
    if (!strcmp(srvid, ""))
    {
        WriteErrorLogId();
        return Plugin_Continue;
    }

    decl String:oldname[65], String:newname[65], String:authid[32], String:text[256];
    
    GetEventString(event, "oldname", oldname, sizeof(oldname));
    GetEventString(event, "newname", newname, sizeof(newname));
    
    GetClientAuthString(client, authid, sizeof(authid));

    Format(text, sizeof(text), "玩家 %s 的名称修改为 %s", oldname, newname);

    logSomeTextYo2("", authid, text, -1, srvid, -1);
    
    return Plugin_Continue;
}

public Action:LogPlayerConnect(Handle:event)
{
    /*if(!GetConVarBool(sm_chatlogex_srvmsgs) || !GetConVarBool(sm_chatlogex_showplayercon))
        return Plugin_Continue;

    decl String:text[256], String:username[65];
    
    GetEventString(event, "address", username, sizeof(username));
    
    if(strcmp(username, "", false) == 0 || strcmp(username, "none", false) == 0)
        return Plugin_Continue;

    decl String:srvid[255];
    
    GetConVarString(sm_chatlogex_id, srvid, sizeof(srvid));
    
    if (!strcmp(srvid, ""))
    {
        WriteErrorLogId();
        return Plugin_Continue;
    }

    GetEventString(event, "name", username, sizeof(username));
    Format(text, sizeof(text), "玩家 %s 已连接", username);

    logSomeTextYo2("", "", text, -1, srvid, -1);*/

    CreateTimer(1.0, LogPlayerCountTimer);
    
    return Plugin_Continue;
}

public Action:Event_PlayerConnect(Handle:event, const String:name[], bool:dontBroadcast)
{
    if(!GetConVarBool(sm_chatlogex_srvmsgs) || !GetConVarBool(sm_chatlogex_showplayercon))
        return Plugin_Continue;

    if(hdatabase == INVALID_HANDLE)
        CreateTimer(2.0, LogPlayerConnect, event);
    else
        LogPlayerConnect(event);

    return Plugin_Continue;
}

public Action:Event_PlayerDisconnect(Handle:event, const String:name[], bool:dontBroadcast)
{
    /*if(!GetConVarBool(sm_chatlogex_srvmsgs) || !GetConVarBool(sm_chatlogex_showplayercon))
        return Plugin_Continue;

    new client = GetClientOfUserId(GetEventInt(event, "userid"));
    
    if(!IsValidPlayer(client))
        return Plugin_Continue;
    
    decl String:srvid[255];
    
    GetConVarString(sm_chatlogex_id, srvid, sizeof(srvid));
    
    if (!strcmp(srvid, ""))
    {
        WriteErrorLogId();
        return Plugin_Continue;
    }

    decl String:username[64], String:reason[128], String:text[256], String:authid[32];
    
    GetEventString(event, "name", username, sizeof(username));
    GetEventString(event, "reason", reason, sizeof(reason));
    
    Format(text, sizeof(text), "玩家 %s 离开游戏 (%s)", username, reason);

    GetClientAuthString(client, authid, sizeof(authid));
    
    logSomeTextYo2("", authid, text, -1, srvid, -1);*/

    CreateTimer(1.0, LogPlayerCountTimer);
    
    return Plugin_Continue;
}

public logSomeTextYo(client, const String:text[], bool:isteam)
{
    decl String:srvid[255];
    GetConVarString(sm_chatlogex_id, srvid, 255);
    if (!strcmp(srvid, ""))
    {
        WriteErrorLogId();
        return;
    }
    
    new chattype = 0;
    decl String:authid[32], String:nameBuffer[64], teamnum;
    if (client != 0)
    {
        if (!IsPlayerAlive(client)) //ignore 'console'
            chattype += 1;
        if (isteam)
            chattype += 2;
        GetClientAuthString(client, authid, sizeof(authid));
        GetClientName(client, nameBuffer, sizeof(nameBuffer));
        teamnum = GetClientTeam(client);
    }
    else
    {
        Format(nameBuffer, sizeof(nameBuffer), "Console");
        Format(authid, sizeof(authid), "");
        teamnum = 0;
    }

    logSomeTextYo2(nameBuffer, authid, text, teamnum, srvid, chattype);
}

public logSomeTextYo2(String:name[], String:authid[], const String:text[], teamnum, const String:srvid[], chattype)
{
    if (hdatabase == INVALID_HANDLE)
    {
        WriteErrorLogDb();
        return;
    }

    decl String:nameesc[65], String:textesc[257], String:query[1024];

    SQL_EscapeString(hdatabase, text, textesc, sizeof(textesc));
    SQL_EscapeString(hdatabase, name, nameesc, sizeof(nameesc));
  
    Format(query, sizeof(query), "INSERT INTO chatlogs (name, steamid, text, team, srvid, type) VALUES ('%s', '%s', '%s', %i, '%s', %i)", nameesc, authid, textesc, teamnum, srvid, chattype);

    SendQuery(query);
}

public logSomeTextYo3(client, const String:text[], teamnum, chattype)
{
    decl String:srvid[255];
    GetConVarString(sm_chatlogex_id, srvid, 255);
    if (!strcmp(srvid, ""))
    {
        WriteErrorLogId();
        return;
    }
    
    decl String:authid[32], String:nameBuffer[64];
    if (client != 0)
    {
        GetClientAuthString(client, authid, sizeof(authid));
        GetClientName(client, nameBuffer, sizeof(nameBuffer));
    }
    else
    {
        Format(nameBuffer, sizeof(nameBuffer), "Console");
        Format(authid, sizeof(authid), "");
    }

    logSomeTextYo2(nameBuffer, authid, text, teamnum, srvid, chattype);
}

PlayerCounter()
{
    new counter = 0;
    
    for (new i = 1; i <= MaxClients; i++)
    {
        if (IsClientConnected(i) && !IsFakeClient(i))
        {
            counter++;
        }
    }
    
    return counter;
}

GetMaxPlayersForCurrentGameMode()
{
    if(GetConVarBool(sm_chatlogex_mpusemaxclients))
        return MaxClients;

    if(StrEqual(m_mode, "coop", false))
    {
        return GetConVarInt(sm_chatlogex_mpcoop);
    }
    else if(StrEqual(m_mode, "versus", false))
    {
        return GetConVarInt(sm_chatlogex_mpversus);
    }
    else if(StrEqual(m_mode, "survival", false))
    {
        return GetConVarInt(sm_chatlogex_mpsurvival);
    }

    return GetConVarInt(sm_chatlogex_mpdefault);
}

LogPlayerCount()
{
    if(!GetConVarBool(sm_chatlogex_srvmsgs) || !GetConVarBool(sm_chatlogex_showplayercon))
        return;

    decl String:srvid[255];
    GetConVarString(sm_chatlogex_id, srvid, 255);
    if (!strcmp(srvid, ""))
    {
        WriteErrorLogId();
        return;
    }
    
    new playercount = PlayerCounter();
    new maxplayercount = GetMaxPlayersForCurrentGameMode();
    
    if(playercount == m_lastplayercount && m_lastmaxplayercount == maxplayercount)
        return;
    
    m_lastplayercount = playercount;
    m_lastmaxplayercount = maxplayercount;
    
    decl String:text[256];
    
    Format(text, sizeof(text), "---当前在线 %d/%d---", m_lastplayercount, m_lastmaxplayercount);
    
    logSomeTextYo2("", "", text, -1, srvid, -1);
}

public Action:LogPlayerCountTimer(Handle:timer)
{
    LogPlayerCount();
}

public IsValidClient(client)
{
    if (client > 0 && client <= MaxClients)
        return true;
    else
        return false;
}

public IsValidPlayer(client)
{
    if (!IsValidClient(client))
        return false;

    if (!IsClientConnected(client))
        return false;

    if (IsFakeClient(client))
        return false;

    if (!IsClientInGame(client))
        return false;

    return true;
}

public sql_Connect(Handle:owner, Handle:hndl, const String:error[], any:data)
{
    if (hndl == INVALID_HANDLE)
        SetFailState("Database failure: %s", error);
    else
        hdatabase = hndl;

    InitialSQL();
}

public sql_Query(Handle:owner, Handle:hndl, const String:error[], any:data)
{
    ResetPack(data);
    new bool:initial = bool:ReadPackCell(data);

    if (hndl == INVALID_HANDLE)
    {
        decl String:query[255];
        ReadPackString(data, query, sizeof(query));

        LogError("Query Failed! %s", error);
        LogError("Query: %s", query);
    }
    else if (initial)
        LogOnMapStart(INVALID_HANDLE);

    CloseHandle(data);
    CloseHandle(hndl);
}

stock SendQuery(const String:query[], bool:initial=false)
{
    new Handle:dp = CreateDataPack();
    WritePackCell(dp, initial);
    WritePackString(dp, query);
    SQL_TQuery(hdatabase, sql_Query, query, dp);
}

InitialSQL()
{
    // Switch to utf8
    SendQuery("SET NAMES utf8;");

    decl String:query[1024];
    Format(query, sizeof(query), "%s%s%s%s%s%s%s%s%s%s%s%s%s",
        "CREATE TABLE IF NOT EXISTS `chatlogs` (",
        "  `seqid` INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,",
        "  `srvid` varchar(255) NOT NULL,",
        "  `date` timestamp NOT NULL default CURRENT_TIMESTAMP,",
        "  `name` varchar(64) NOT NULL,",
        "  `steamid` varchar(32) NOT NULL,",
        "  `text` varchar(192) NOT NULL,",
        "  `team` int(1) NOT NULL,",
        "  `type` int(2) NOT NULL,",
        "  INDEX (`srvid`),",
        "  INDEX (`steamid`))",
        "  DEFAULT CHARSET=utf8",
        ";"
    );

    SendQuery(query, true);
}

