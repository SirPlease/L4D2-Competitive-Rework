/*
============================== Version 0.1:

This version is almost entirely just for Servers in use for CEDAPugs (Cedapug & SirPlease Servers)
It will quickly grow and include stuff will apply to all servers.

Callvote general changes:
- Fix double votes (technically should already be fixed in the latest extension)

CEDAPug changes:
- Blocked return to lobby votes during live CEDAPug games.
- Blocked change campaign votes during live CEDAPug games.

*/

#pragma semicolon 1
#pragma newdecls required

#include <builtinvotes>
#include <sourcemod>

bool
	g_bCedaGame;

public Plugin myinfo =
{
	name        = "[L4D2] Annoyance/Exploit Fixes",
	author      = "Sir",
	description = "A compilation of 'fixes' to deal with annoyances and exploits.",
	version     = "0.1",
	url         = ""

}

public void OnPluginStart()
{
	LoadTranslations("annoyance_exploit_fixes.phrases");
	// Command Listener
	AddCommandListener(Listener_CallVote, "callvote");
}

public void OnCedapugStarted()
{
	g_bCedaGame = true;
}

public void OnCedapugEnded()
{
	g_bCedaGame = false;
}

public Action Listener_CallVote(int client, const char[] command, int argc)
{
	// Check if we can even do a vote
	if (!IsNewBuiltinVoteAllowed)
	{
		PrintToChat(client, "%t %t", "Tag", "TryAgain", CheckBuiltinVoteDelay());
		return Plugin_Handled;
	}

	// Storage
	char sVoteType[32];
	char sVoteArgument[32];

	// Get Vote Type
	GetCmdArg(1, sVoteType, sizeof(sVoteType));
	GetCmdArg(2, sVoteArgument, sizeof(sVoteArgument));

	// ------------------------------------------------------------
	// Return to Lobby
	// ------------------------------------------------------------
	if (strcmp(sVoteType, "ReturnToLobby", false) == 0)
	{
		// Only really care for CEDAPugs
		if (g_bCedaGame)
			return Plugin_Handled;
	}

	// ------------------------------------------------------------
	// Change Map
	// ------------------------------------------------------------
	if (strcmp(sVoteType, "ChangeMission", false) == 0)
	{
		// Only really care for CEDAPugs
		if (g_bCedaGame)
			return Plugin_Handled;
	}

	// Keep em 'goin.
	return Plugin_Continue;
}
